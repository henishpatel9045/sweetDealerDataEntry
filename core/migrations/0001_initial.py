# Generated by Django 4.2.5 on 2023-10-16 15:16

import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[], max_length=200, unique=True)),
                ('current_quantity', models.IntegerField(default=0)),
                ('ordered_quantity', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bill_number', models.IntegerField(unique=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('customer_name', models.CharField(default='', max_length=200)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('kaju_katri_500', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('kaju_katri_1000', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('magaj_500', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('magaj_1000', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('premium_mohanthal_500', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('premium_mohanthal_1000', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('special_toparapak_500', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('special_toparapak_1000', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('barfi_500', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('barfi_1000', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('mava_mix_mithai_500', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('mava_mix_mithai_1000', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('dry_fruite_biscuite_500', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('dry_fruite_biscuite_1000', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('surti_chavanu_500', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('surti_chavanu_1000', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('son_papdi_500', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")])),
                ('total_amount', models.IntegerField(blank=True)),
                ('delivered', models.BooleanField(default=False)),
            ],
        ),
    ]
