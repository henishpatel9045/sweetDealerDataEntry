# Generated by Django 4.2.6 on 2023-11-02 10:46

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0008_delete_billbook'),
    ]

    operations = [
        migrations.AddField(
            model_name='item',
            name='box_dispatched_1000',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='item',
            name='box_dispatched_500',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='order',
            name='barfi_1000',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Barfi 1kg'),
        ),
        migrations.AlterField(
            model_name='order',
            name='barfi_500',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Barfi 500g'),
        ),
        migrations.AlterField(
            model_name='order',
            name='dry_fruite_biscuite_1000',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Dry Fruite Biscuite 1kg'),
        ),
        migrations.AlterField(
            model_name='order',
            name='dry_fruite_biscuite_500',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Dry Fruite Biscuite 500g'),
        ),
        migrations.AlterField(
            model_name='order',
            name='kaju_katri_1000',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Kaju Katri 1kg'),
        ),
        migrations.AlterField(
            model_name='order',
            name='kaju_katri_500',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Kaju Katri 500g'),
        ),
        migrations.AlterField(
            model_name='order',
            name='magaj_1000',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Magaj 1kg'),
        ),
        migrations.AlterField(
            model_name='order',
            name='magaj_500',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Magaj 500g'),
        ),
        migrations.AlterField(
            model_name='order',
            name='mava_mix_mithai_1000',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Mava Mix Mithai 1kg'),
        ),
        migrations.AlterField(
            model_name='order',
            name='mava_mix_mithai_500',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Mava Mix Mithai 500g'),
        ),
        migrations.AlterField(
            model_name='order',
            name='premium_mohanthal_1000',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Premium Mohanthal 1kg'),
        ),
        migrations.AlterField(
            model_name='order',
            name='premium_mohanthal_500',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Premium Mohanthal 500g'),
        ),
        migrations.AlterField(
            model_name='order',
            name='son_papdi_1000',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Son Papdi 1kg'),
        ),
        migrations.AlterField(
            model_name='order',
            name='son_papdi_500',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Son Papdi 500g'),
        ),
        migrations.AlterField(
            model_name='order',
            name='special_toparapak_1000',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Special Toparapak 1kg'),
        ),
        migrations.AlterField(
            model_name='order',
            name='special_toparapak_500',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Special Toparapak 500g'),
        ),
        migrations.AlterField(
            model_name='order',
            name='surti_chavanu_1000',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Surti Chavanu 1kg'),
        ),
        migrations.AlterField(
            model_name='order',
            name='surti_chavanu_500',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, "Quantity can't be negative.")], verbose_name='Surti Chavanu 500g'),
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('box_500', models.IntegerField(default=0)),
                ('box_1000', models.IntegerField(default=0)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.item')),
            ],
        ),
    ]
